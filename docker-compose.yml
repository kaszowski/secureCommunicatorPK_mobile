services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  backend:
    build: ./secureCommunicatorBackend
    container_name: backend
    # Remove port exposure since nginx will handle routing
    expose:
      - "5000"
    volumes:
      - ./secureCommunicatorBackend:/app
      - /app/node_modules
    command: >
      sh -c "npm install &&
             npm run start"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydb
      - DB_HOST=db
      - DB_PORT=5432
      - NODE_ENV=development

  frontend:
    build: ./secureCommunicatorFrontend
    container_name: frontend
    expose:
      - "5173"
    volumes:
      - ./secureCommunicatorFrontend:/app
      - /app/node_modules
    command: npm run dev

  db:
    image: postgres:16
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
